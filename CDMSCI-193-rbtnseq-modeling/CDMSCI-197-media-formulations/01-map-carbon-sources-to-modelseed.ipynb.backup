{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Map Carbon Sources to ModelSEED Compound IDs\n",
    "\n",
    "**Parent**: CDMSCI-193 - RBTnSeq Modeling Analysis\n",
    "\n",
    "**Ticket**: CDMSCI-197 - Translate to Computational Media Formulations\n",
    "\n",
    "## Objective\n",
    "\n",
    "Map 206 carbon sources from Fitness Browser data to ModelSEED compound IDs (cpd#####) for metabolic modeling.\n",
    "\n",
    "## Mapping Strategy\n",
    "\n",
    "**Round 1: Automated Search**\n",
    "1. Search local template (GramNegModelTemplateV6.json)\n",
    "2. Search ModelSEED Solr API (https://modelseed.org)\n",
    "3. Handle duplicates by choosing lower compound ID\n",
    "\n",
    "**Round 2: AI-Assisted Mapping**\n",
    "1. Use GPT-5 (via Argo proxy) for unmapped compounds\n",
    "2. Provide compound name + chemical context\n",
    "3. Get ModelSEED ID suggestion with explanation\n",
    "\n",
    "## Outputs\n",
    "\n",
    "1. `carbon_source_mapping.csv` - Complete mapping table\n",
    "2. `media/` directory - Individual media JSON files for each carbon source\n",
    "\n",
    "**Last updated**: 2025-10-07"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Imports successful\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "from urllib.request import urlopen, URLError\n",
    "from urllib.parse import quote\n",
    "import requests\n",
    "import time\n",
    "\n",
    "print(\"Imports successful\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Configuration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Configuration set\n",
      "  Carbon sources: ../CDMSCI-196-carbon-sources/results/combined_growth_matrix.csv\n",
      "  Template: ../references/build_metabolic_model/GramNegModelTemplateV6.json\n",
      "  Output: results/carbon_source_mapping.csv\n",
      "  Media directory: media\n"
     ]
    }
   ],
   "source": [
    "# Paths\n",
    "CARBON_SOURCES_FILE = Path('../CDMSCI-196-carbon-sources/results/combined_growth_matrix.csv')\n",
    "TEMPLATE_PATH = Path('../references/build_metabolic_model/GramNegModelTemplateV6.json')\n",
    "\n",
    "# Output paths\n",
    "OUTPUT_DIR = Path('results')\n",
    "OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "MEDIA_DIR = Path('media')\n",
    "MEDIA_DIR.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "MAPPING_FILE = OUTPUT_DIR / 'carbon_source_mapping.csv'\n",
    "\n",
    "# ModelSEED Solr API\n",
    "SOLR_URL = 'https://modelseed.org/solr/compounds/select'\n",
    "\n",
    "# Argo proxy for LLM\n",
    "ARGO_BASE_URL = 'http://localhost:8000/v1'\n",
    "ARGO_MODEL = 'gpt5'  # Latest GPT-5 reasoning model\n",
    "\n",
    "print(f\"Configuration set\")\n",
    "print(f\"  Carbon sources: {CARBON_SOURCES_FILE}\")\n",
    "print(f\"  Template: {TEMPLATE_PATH}\")\n",
    "print(f\"  Output: {MAPPING_FILE}\")\n",
    "print(f\"  Media directory: {MEDIA_DIR}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Carbon Sources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading carbon sources from combined growth matrix...\n",
      "\n",
      "Loaded 206 carbon sources\n",
      "\n",
      "First 10 carbon sources:\n",
      "    1. (+)-Arabinogalactan\n",
      "    2. 1-Pentanol\n",
      "    3. 1,2-Propanediol\n",
      "    4. 1,3-Butandiol\n",
      "    5. 1,4-B-D-Galactobiose\n",
      "    6. 1,4-Butanediol\n",
      "    7. 1,5-Pentanediol\n",
      "    8. 2'-Deoxycytidine\n",
      "    9. 2'-Deoxyinosine\n",
      "   10. 2-Deoxy-D-ribonic acid lithium salt\n"
     ]
    }
   ],
   "source": [
    "print(\"Loading carbon sources from combined growth matrix...\")\n",
    "growth_matrix = pd.read_csv(CARBON_SOURCES_FILE, index_col=0)\n",
    "\n",
    "carbon_sources = growth_matrix.index.tolist()\n",
    "\n",
    "print(f\"\\nLoaded {len(carbon_sources)} carbon sources\")\n",
    "print(f\"\\nFirst 10 carbon sources:\")\n",
    "for i, cs in enumerate(carbon_sources[:10], 1):\n",
    "    print(f\"  {i:3d}. {cs}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Template"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading ModelSEED template: ../references/build_metabolic_model/GramNegModelTemplateV6.json\n",
      "\n",
      "Template loaded:\n",
      "  Compounds: 6573\n",
      "  Reactions: 8584\n",
      "\n",
      "Indexed 6573 compounds for searching\n"
     ]
    }
   ],
   "source": [
    "print(f\"Loading ModelSEED template: {TEMPLATE_PATH}\")\n",
    "with open(TEMPLATE_PATH) as f:\n",
    "    template = json.load(f)\n",
    "\n",
    "print(f\"\\nTemplate loaded:\")\n",
    "print(f\"  Compounds: {len(template['compounds'])}\")\n",
    "print(f\"  Reactions: {len(template['reactions'])}\")\n",
    "\n",
    "# Create compound index for fast lookup\n",
    "template_compounds = template['compounds']\n",
    "print(f\"\\nIndexed {len(template_compounds)} compounds for searching\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Search Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Search functions defined\n"
     ]
    }
   ],
   "source": [
    "def search_template(compound_name):\n",
    "    \"\"\"Search for compound in local template\"\"\"\n",
    "    matches = []\n",
    "    search_lower = compound_name.lower()\n",
    "    \n",
    "    for compound in template_compounds:\n",
    "        # Search in name\n",
    "        if search_lower == compound['name'].lower():\n",
    "            matches.append(compound)\n",
    "            continue\n",
    "        \n",
    "        # Search in abbreviation\n",
    "        abbr = compound.get('abbreviation', '')\n",
    "        if abbr and search_lower == abbr.lower():\n",
    "            matches.append(compound)\n",
    "            continue\n",
    "        \n",
    "        # Search in aliases\n",
    "        for alias in compound.get('aliases', []):\n",
    "            if search_lower in alias.lower():\n",
    "                matches.append(compound)\n",
    "                break\n",
    "    \n",
    "    return matches\n",
    "\n",
    "\n",
    "def search_solr(compound_name):\n",
    "    \"\"\"Search ModelSEED Solr API\"\"\"\n",
    "    query = f\"{SOLR_URL}?wt=json&q=aliases:{quote(compound_name)}&fl=name,id,formula,charge,mass,aliases\"\n",
    "    \n",
    "    try:\n",
    "        connection = urlopen(query, timeout=10)\n",
    "        response = json.load(connection)\n",
    "        return response['response']['docs']\n",
    "    except Exception as e:\n",
    "        print(f\"    WARNING: Solr search failed: {e}\")\n",
    "        return []\n",
    "\n",
    "\n",
    "def search_compound_round1(compound_name):\n",
    "    \"\"\"Round 1: Search template and Solr\"\"\"\n",
    "    # Try template first (faster, offline)\n",
    "    template_matches = search_template(compound_name)\n",
    "    \n",
    "    # Try Solr if no template matches\n",
    "    solr_matches = search_solr(compound_name) if not template_matches else []\n",
    "    \n",
    "    # Combine and deduplicate\n",
    "    all_matches = []\n",
    "    seen_ids = set()\n",
    "    \n",
    "    for match in template_matches:\n",
    "        cpd_id = match['id']\n",
    "        if cpd_id not in seen_ids:\n",
    "            all_matches.append({\n",
    "                'id': cpd_id,\n",
    "                'name': match['name'],\n",
    "                'formula': match.get('formula', ''),\n",
    "                'charge': match.get('defaultCharge', 0),\n",
    "                'mass': match.get('mass', 0),\n",
    "                'source': 'template'\n",
    "            })\n",
    "            seen_ids.add(cpd_id)\n",
    "    \n",
    "    for match in solr_matches:\n",
    "        cpd_id = match['id']\n",
    "        if cpd_id not in seen_ids:\n",
    "            all_matches.append({\n",
    "                'id': cpd_id,\n",
    "                'name': match['name'],\n",
    "                'formula': match.get('formula', ''),\n",
    "                'charge': match.get('charge', 0),\n",
    "                'mass': match.get('mass', 0),\n",
    "                'source': 'solr'\n",
    "            })\n",
    "            seen_ids.add(cpd_id)\n",
    "    \n",
    "    # Sort by ID (lower IDs first)\n",
    "    all_matches.sort(key=lambda x: x['id'])\n",
    "    \n",
    "    return all_matches\n",
    "\n",
    "print(\"Search functions defined\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## AI-Assisted Mapping (Round 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LLM function defined\n"
     ]
    }
   ],
   "source": [
    "def ask_llm_for_mapping(compound_name):\n",
    "    \"\"\"Use LLM to suggest ModelSEED compound ID\"\"\"\n",
    "    \n",
    "    prompt = f\"\"\"You are a biochemistry expert helping map compound names to ModelSEED database IDs.\n",
    "\n",
    "Compound name: \"{compound_name}\"\n",
    "\n",
    "Task: Suggest the most likely ModelSEED compound ID (format: cpd#####) for this compound.\n",
    "\n",
    "Context:\n",
    "- This is a carbon source from bacterial growth experiments\n",
    "- ModelSEED uses standardized compound IDs (e.g., cpd00027 = D-Glucose)\n",
    "- Common carbon sources: glucose (cpd00027), glycerol (cpd00100), acetate (cpd00029)\n",
    "- For complex names, try to identify the base metabolite\n",
    "- For salts/hydrates, use the base compound (e.g., \"Citric Acid\" → cpd00137 = Citrate)\n",
    "- For polymers, suggest the monomer (e.g., \"Amylose\" → cpd00027 = Glucose)\n",
    "\n",
    "Response format (JSON):\n",
    "{{\n",
    "  \"compound_id\": \"cpd#####\",\n",
    "  \"compound_name\": \"Official ModelSEED name\",\n",
    "  \"explanation\": \"One-line explanation of mapping rationale\",\n",
    "  \"confidence\": \"high/medium/low\"\n",
    "}}\n",
    "\n",
    "If you cannot confidently map this compound, return:\n",
    "{{\n",
    "  \"compound_id\": \"UNMAPPED\",\n",
    "  \"compound_name\": \"\",\n",
    "  \"explanation\": \"Reason why mapping is not possible\",\n",
    "  \"confidence\": \"low\"\n",
    "}}\n",
    "\"\"\"\n",
    "    \n",
    "    try:\n",
    "        response = requests.post(\n",
    "            f\"{ARGO_BASE_URL}/chat/completions\",\n",
    "            json={\n",
    "                \"model\": ARGO_MODEL,\n",
    "                \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n",
    "                \"temperature\": 0.1,  # Low temperature for consistent reasoning\n",
    "                \"max_tokens\": 500\n",
    "            },\n",
    "            timeout=30\n",
    "        )\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            result = response.json()\n",
    "            content = result['choices'][0]['message']['content']\n",
    "            \n",
    "            # Try to parse JSON from response\n",
    "            # Handle markdown code blocks if present\n",
    "            if '```json' in content:\n",
    "                content = content.split('```json')[1].split('```')[0].strip()\n",
    "            elif '```' in content:\n",
    "                content = content.split('```')[1].split('```')[0].strip()\n",
    "            \n",
    "            mapping = json.loads(content)\n",
    "            return mapping\n",
    "        else:\n",
    "            print(f\"    WARNING: LLM request failed with status {response.status_code}\")\n",
    "            return None\n",
    "            \n",
    "    except Exception as e:\n",
    "        print(f\"    WARNING: LLM request error: {e}\")\n",
    "        return None\n",
    "\n",
    "print(\"LLM function defined\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Round 1: Automated Mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "ROUND 1: AUTOMATED MAPPING\n",
      "================================================================================\n",
      "\n",
      "[1/206] (+)-Arabinogalactan\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[2/206] 1-Pentanol\n",
      "  ✓  Mapped: cpd16586 - 1-Pentanol\n",
      "\n",
      "[3/206] 1,2-Propanediol\n",
      "  ✓  Mapped: cpd00453 - 1,2-Propanediol\n",
      "\n",
      "[4/206] 1,3-Butandiol\n",
      "  ✓  Mapped: cpd23328 - (RS)-1,3-butandiol\n",
      "\n",
      "[5/206] 1,4-B-D-Galactobiose\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[6/206] 1,4-Butanediol\n",
      "  ⚠️  DUPLICATE: Found 6 matches: ['cpd00228', 'cpd00701', 'cpd07556', 'cpd20831', 'cpd20836', 'cpd23934']\n",
      "  ✓  Selected: cpd00228 (lowest ID)\n",
      "\n",
      "[7/206] 1,5-Pentanediol\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[8/206] 2'-Deoxycytidine\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00206', 'cpd00356', 'cpd00533', 'cpd00654', 'cpd02261', 'cpd22874', 'cpd26102', 'cpd26126', 'cpd26127', 'cpd26128']\n",
      "  ✓  Selected: cpd00206 (lowest ID)\n",
      "\n",
      "[9/206] 2'-Deoxyinosine\n",
      "  ⚠️  DUPLICATE: Found 4 matches: ['cpd00976', 'cpd00977', 'cpd03279', 'cpd03704']\n",
      "  ✓  Selected: cpd00976 (lowest ID)\n",
      "\n",
      "[10/206] 2-Deoxy-D-ribonic acid lithium salt\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[11/206] 2-Deoxy-D-Ribose\n",
      "  ⚠️  DUPLICATE: Found 5 matches: ['cpd00509', 'cpd00510', 'cpd01242', 'cpd02567', 'cpd23278']\n",
      "  ✓  Selected: cpd00509 (lowest ID)\n",
      "\n",
      "[12/206] 2-Deoxyadenosine monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[13/206] 2-Deoxyadenosine 5-monophosphate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[14/206] 2-methyl-1-butanol\n",
      "  ✓  Mapped: cpd16873 - 2-methyl-1-butanol\n",
      "\n",
      "[15/206] 2-Piperidinone\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[16/206] 3-methyl-1-butanol\n",
      "  ⚠️  DUPLICATE: Found 5 matches: ['cpd09068', 'cpd20828', 'cpd31835', 'cpd32136', 'cpd34238']\n",
      "  ✓  Selected: cpd09068 (lowest ID)\n",
      "\n",
      "[17/206] 3-Methyl-2-Oxobutanoic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[18/206] 3-methyl-2-oxopentanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[19/206] 3-methyl-3-butenol\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[20/206] 4-Aminobutyric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[21/206] 4-Hydroxybenzoic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[22/206] 4-Hydroxyvalerate\n",
      "  ⚠️  DUPLICATE: Found 2 matches: ['cpd02258', 'cpd31889']\n",
      "  ✓  Selected: cpd02258 (lowest ID)\n",
      "\n",
      "[23/206] 4-Methyl-2-oxovaleric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[24/206] 5-Aminovaleric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[25/206] 5-Keto-D-Gluconic Acid potassium salt\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[26/206] 6-O-Acetyl-D-glucose\n",
      "  ⚠️  DUPLICATE: Found 5 matches: ['cpd01441', 'cpd01757', 'cpd27277', 'cpd28958', 'cpd32780']\n",
      "  ✓  Selected: cpd01441 (lowest ID)\n",
      "\n",
      "[27/206] a-Cyclodextrin\n",
      "  ✓  Mapped: cpd24451 - a-cyclodextrin\n",
      "\n",
      "[28/206] a-Ketoglutaric acid disodium salt hydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[29/206] Acetylated xylan\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[30/206] Actilight\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[31/206] Adenine hydrochloride hydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[32/206] Adenosine\n",
      "  ✓  Mapped: cpd00182 - Adenosine\n",
      "\n",
      "[33/206] Agro_defined_trehalose\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[34/206] amylopectin from maize\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[35/206] Amylose from potato\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[36/206] Avantafiber\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[37/206] Azelaic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[38/206] benzoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[39/206] Beta-Lactose\n",
      "  ✓  Mapped: cpd01354 - beta-Lactose\n",
      "\n",
      "[40/206] Bimuno-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[41/206] Bioecolians-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[42/206] Butanol\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd03662', 'cpd09068', 'cpd10408', 'cpd16873', 'cpd17380', 'cpd17802', 'cpd20828', 'cpd20856', 'cpd20858', 'cpd24405']\n",
      "  ✓  Selected: cpd03662 (lowest ID)\n",
      "\n",
      "[43/206] Butyl stearate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[44/206] Carnitine Hydrochloride\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[45/206] casamino acids\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[46/206] Chondroitin sulfate A sodium salt from bovine trachea\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[47/206] Citric Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[48/206] CravingZGone-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[49/206] Cytidine\n",
      "  ✓  Mapped: cpd00367 - Cytidine\n",
      "\n",
      "[50/206] Cytosine\n",
      "  ✓  Mapped: cpd00307 - Cytosine\n",
      "\n",
      "[51/206] D-Alanine\n",
      "  ✓  Mapped: cpd00117 - D-Alanine\n",
      "\n",
      "[52/206] D-Arabinose\n",
      "  ✓  Mapped: cpd00185 - D-Arabinose\n",
      "\n",
      "[53/206] D-Cellobiose\n",
      "  ⚠️  DUPLICATE: Found 5 matches: ['cpd00158', 'cpd02760', 'cpd03844', 'cpd03845', 'cpd31631']\n",
      "  ✓  Selected: cpd00158 (lowest ID)\n",
      "\n",
      "[54/206] D-Fructose\n",
      "  ✓  Mapped: cpd00082 - D-Fructose\n",
      "\n",
      "[55/206] D-Galactose\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00108', 'cpd00348', 'cpd00709', 'cpd00724', 'cpd00818', 'cpd01423', 'cpd02887', 'cpd03895', 'cpd31912', 'cpd34475']\n",
      "  ✓  Selected: cpd00108 (lowest ID)\n",
      "\n",
      "[56/206] D-Galacturonic Acid monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[57/206] D-Gluconic Acid sodium salt\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[58/206] D-Glucosamine Hydrochloride\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[59/206] D-Glucose\n",
      "  ✓  Mapped: cpd00027 - D-Glucose\n",
      "\n",
      "[60/206] D-Glucose-6-Phosphate sodium salt\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[61/206] D-Glucuronic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[62/206] D-Leucrose\n",
      "  ✓  Mapped: cpd32154 - alpha-D-glucopyranose-(1->5)-beta-D-fructopyranose\n",
      "\n",
      "[63/206] D-Lysine\n",
      "  ✓  Mapped: cpd00549 - D-Lysine\n",
      "\n",
      "[64/206] D-Maltose monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[65/206] D-Mannitol\n",
      "  ✓  Mapped: cpd00314 - D-Mannitol\n",
      "\n",
      "[66/206] D-Mannose\n",
      "  ✓  Mapped: cpd00138 - D-Mannose\n",
      "\n",
      "[67/206] D-Raffinose pentahydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[68/206] D-Ribose\n",
      "  ✓  Mapped: cpd00105 - D-Ribose\n",
      "\n",
      "[69/206] D-Salicin\n",
      "  ✓  Mapped: cpd01030 - Salicin\n",
      "\n",
      "[70/206] D-Serine\n",
      "  ✓  Mapped: cpd00550 - D-Serine\n",
      "\n",
      "[71/206] D-Sorbitol\n",
      "  ⚠️  DUPLICATE: Found 5 matches: ['cpd00491', 'cpd00588', 'cpd00804', 'cpd01187', 'cpd04531']\n",
      "  ✓  Selected: cpd00491 (lowest ID)\n",
      "\n",
      "[72/206] D-Tagatose\n",
      "  ✓  Mapped: cpd00589 - D-Tagatose\n",
      "\n",
      "[73/206] D-Trehalose dihydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[74/206] D-Xylose\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00154', 'cpd00163', 'cpd01422', 'cpd01487', 'cpd02342', 'cpd04185', 'cpd14876', 'cpd22700', 'cpd26831', 'cpd28748']\n",
      "  ✓  Selected: cpd00154 (lowest ID)\n",
      "\n",
      "[75/206] Decanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[76/206] Deoxyribonucleic acid from herring sperm\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[77/206] dextran, Mw ~200,000\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[78/206] Disodium Glutarate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[79/206] D,L-Malic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[80/206] Dodecandioic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[81/206] Ethanol\n",
      "  ✓  Mapped: cpd00363 - Ethanol\n",
      "\n",
      "[82/206] Ferulic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[83/206] Fibersol-2-AG-fiber\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[84/206] Fructooligosaccharides (FOS)\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[85/206] Fructooligosaccharides from chicory\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[86/206] Fumaric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[87/206] Gelatin\n",
      "  ⚠️  DUPLICATE: Found 7 matches: ['cpd11697', 'cpd11775', 'cpd11879', 'cpd12059', 'cpd12097', 'cpd12309', 'cpd12310']\n",
      "  ✓  Selected: cpd11697 (lowest ID)\n",
      "\n",
      "[88/206] Glucuronamide\n",
      "  ✓  Mapped: cpd26269 - 2,3,4,5-tetrahydroxy-6-oxo-hexanamide\n",
      "\n",
      "[89/206] Gly-DL-Asp\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[90/206] Gly-Glu\n",
      "  ⚠️  DUPLICATE: Found 9 matches: ['cpd11592', 'cpd12113', 'cpd12176', 'cpd23333', 'cpd24418', 'cpd26320', 'cpd26394', 'cpd34623', 'cpd35155']\n",
      "  ✓  Selected: cpd11592 (lowest ID)\n",
      "\n",
      "[91/206] Glycerol\n",
      "  ✓  Mapped: cpd00100 - Glycerol\n",
      "\n",
      "[92/206] Glycine\n",
      "  ✓  Mapped: cpd00033 - Glycine\n",
      "\n",
      "[93/206] Glycolic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[94/206] Heparin sodium salt from porcine intestinal mucosa\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[95/206] Heptanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[96/206] Hexanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[97/206] Hyaluronic acid sodium salt from Streptococcus equi\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[98/206] Hydroxy-L-Proline\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00747', 'cpd00851', 'cpd03065', 'cpd12539', 'cpd12540', 'cpd22122', 'cpd24644', 'cpd29317', 'cpd29747', 'cpd34772']\n",
      "  ✓  Selected: cpd00747 (lowest ID)\n",
      "\n",
      "[99/206] Inosine\n",
      "  ✓  Mapped: cpd00246 - Inosine\n",
      "\n",
      "[100/206] Inulin from chicory\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[101/206] Isomaltose\n",
      "  ⚠️  DUPLICATE: Found 3 matches: ['cpd00217', 'cpd32824', 'cpd35829']\n",
      "  ✓  Selected: cpd00217 (lowest ID)\n",
      "\n",
      "[102/206] ISOThrive-prebiotic lot A\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[103/206] ISOThrive-prebiotic lot B\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[104/206] ISOThrive-prebiotic lot C\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[105/206] ISOThrive-prebiotic lot D\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[106/206] Itaconic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[107/206] L-Alanine\n",
      "  ✓  Mapped: cpd00035 - L-Alanine\n",
      "\n",
      "[108/206] L-Arabinose\n",
      "  ✓  Mapped: cpd00224 - L-Arabinose\n",
      "\n",
      "[109/206] L-Arginine\n",
      "  ✓  Mapped: cpd00051 - L-Arginine\n",
      "\n",
      "[110/206] L-Asparagine\n",
      "  ✓  Mapped: cpd00132 - L-Asparagine\n",
      "\n",
      "[111/206] L-Aspartic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[112/206] L-Citrulline\n",
      "  ⚠️  DUPLICATE: Found 7 matches: ['cpd00274', 'cpd01748', 'cpd11209', 'cpd12200', 'cpd12236', 'cpd18031', 'cpd27819']\n",
      "  ✓  Selected: cpd00274 (lowest ID)\n",
      "\n",
      "[113/206] L-Cysteine hydrochloride monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[114/206] L-Fucose\n",
      "  ✓  Mapped: cpd00751 - L-Fucose\n",
      "\n",
      "[115/206] L-Glutamic acid monopotassium salt monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[116/206] L-Glutamine\n",
      "  ✓  Mapped: cpd00053 - L-Glutamine\n",
      "\n",
      "[117/206] L-Histidine\n",
      "  ✓  Mapped: cpd00119 - L-Histidine\n",
      "\n",
      "[118/206] L-Isoleucine\n",
      "  ✓  Mapped: cpd00322 - L-Isoleucine\n",
      "\n",
      "[119/206] L-Leucine\n",
      "  ✓  Mapped: cpd00107 - L-Leucine\n",
      "\n",
      "[120/206] L-Lysine\n",
      "  ✓  Mapped: cpd00039 - L-Lysine\n",
      "\n",
      "[121/206] L-Malic acid disodium salt monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[122/206] L-Methionine\n",
      "  ✓  Mapped: cpd00060 - L-Methionine\n",
      "\n",
      "[123/206] L-Ornithine\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00064', 'cpd00342', 'cpd02160', 'cpd02329', 'cpd02587', 'cpd23977', 'cpd27593', 'cpd27631', 'cpd27632', 'cpd37020']\n",
      "  ✓  Selected: cpd00064 (lowest ID)\n",
      "\n",
      "[124/206] L-Phenylalanine\n",
      "  ✓  Mapped: cpd00066 - L-Phenylalanine\n",
      "\n",
      "[125/206] L-Proline\n",
      "  ✓  Mapped: cpd00129 - L-Proline\n",
      "\n",
      "[126/206] L-Rhamnose monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[127/206] L-Serine\n",
      "  ✓  Mapped: cpd00054 - L-Serine\n",
      "\n",
      "[128/206] L-Sorbose\n",
      "  ✓  Mapped: cpd00212 - L-Sorbose\n",
      "\n",
      "[129/206] L-Threonine\n",
      "  ✓  Mapped: cpd00161 - L-Threonine\n",
      "\n",
      "[130/206] L-Tryptophan\n",
      "  ✓  Mapped: cpd00065 - L-Tryptophan\n",
      "\n",
      "[131/206] L-tyrosine disodium salt\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[132/206] L-Valine\n",
      "  ✓  Mapped: cpd00156 - L-Valine\n",
      "\n",
      "[133/206] Lactitol\n",
      "  ⚠️  DUPLICATE: Found 2 matches: ['cpd09457', 'cpd37280']\n",
      "  ✓  Selected: cpd09457 (lowest ID)\n",
      "\n",
      "[134/206] Lacto-N-neotetraose\n",
      "  ✓  Mapped: cpd34410 - Gal-beta-(1,4)-GlcNAc-beta-(1,3)-Gal-beta-(1,4)-Glc\n",
      "\n",
      "[135/206] Lacto-N-tetraose\n",
      "  ✓  Mapped: cpd03807 - Lacto-N-tetraose\n",
      "\n",
      "[136/206] Lactulose\n",
      "  ✓  Mapped: cpd04349 - Lactulose\n",
      "\n",
      "[137/206] Laminaribiose\n",
      "  ✓  Mapped: cpd01397 - Laminariaceae\n",
      "\n",
      "[138/206] Laminarin from Laminaria digitata\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[139/206] Lauric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[140/206] Levan - from Erwinia herbicola\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[141/206] Levulinic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[142/206] m-Inositol\n",
      "  ⚠️  DUPLICATE: Found 10 matches: ['cpd00121', 'cpd11837', 'cpd12802', 'cpd31730', 'cpd31803', 'cpd32329', 'cpd33115', 'cpd34417', 'cpd35210', 'cpd35688']\n",
      "  ✓  Selected: cpd00121 (lowest ID)\n",
      "\n",
      "[143/206] Malonic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[144/206] Maltitol\n",
      "  ✓  Mapped: cpd37280 - 4-O-alpha-D-glucopyranosyl-D-glucitol\n",
      "\n",
      "[145/206] Maltodextrin\n",
      "  ✓  Mapped: cpd11976 - Maltodextrin\n",
      "\n",
      "[146/206] Maltohexaose\n",
      "  ✓  Mapped: cpd01329 - Maltohexaose\n",
      "\n",
      "[147/206] Maltotetraose\n",
      "  ✓  Mapped: cpd01399 - Maltotetraose\n",
      "\n",
      "[148/206] Mannan from Saccharomyces cerevisiae\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[149/206] Melibiose\n",
      "  ✓  Mapped: cpd03198 - Melibiose\n",
      "\n",
      "[150/206] Methyl-B-D-galactopyranoside\n",
      "  ✓  Mapped: cpd02274 - Methyl beta-D-galactoside\n",
      "\n",
      "[151/206] Myristic acid\n",
      "  ✓  Mapped: cpd03847 - Myristic acid\n",
      "\n",
      "[152/206] N-Acetyl-D-Glucosamine\n",
      "  ✓  Mapped: cpd00122 - N-Acetyl-D-glucosamine\n",
      "\n",
      "[153/206] Nonanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[154/206] Octanoic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[155/206] Oleic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[156/206] p-Coumaric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[157/206] palatinose hydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[158/206] Parabanic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[159/206] Pectin\n",
      "  ⚠️  DUPLICATE: Found 4 matches: ['cpd01532', 'cpd11601', 'cpd11686', 'cpd27835']\n",
      "  ✓  Selected: cpd01532 (lowest ID)\n",
      "\n",
      "[160/206] Phenylacetic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[161/206] Pimelic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[162/206] polygalacturonic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[163/206] Potassium acetate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[164/206] Potassium oxalate monohydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[165/206] Prebiotin-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[166/206] PreticX-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[167/206] Promitor-fiber\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[168/206] Protocatechuic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[169/206] Putrescine Dihydrochloride\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[170/206] Red Arabinan from sugar-beet\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[171/206] Rhamnogalacturonan - from potato\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[172/206] Sebacic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[173/206] Shikimic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[174/206] Sodium acetate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[175/206] Sodium adipate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[176/206] Sodium butyrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[177/206] Sodium D-Lactate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[178/206] Sodium D,L-Lactate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[179/206] Sodium Formate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[180/206] Sodium Fumarate dibasic\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[181/206] Sodium L-Lactate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[182/206] Sodium octanoate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[183/206] Sodium propionate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[184/206] Sodium pyruvate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[185/206] Sodium succinate dibasic hexahydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[186/206] Stachyose - 70%\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[187/206] Starch\n",
      "  ✓  Mapped: cpd11657 - Starch\n",
      "\n",
      "[188/206] Suberic acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[189/206] Succinic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[190/206] Sucrose\n",
      "  ✓  Mapped: cpd00076 - Sucrose\n",
      "\n",
      "[191/206] Sunfiber-fiber\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[192/206] Supernatant; Agrobacterium rhizogenes K599 grown in Agro_defined_trehalose (~7.5 mM 3-keto-trehalose)\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[193/206] Thymidine\n",
      "  ✓  Mapped: cpd00184 - Thymidine\n",
      "\n",
      "[194/206] Thymine\n",
      "  ✓  Mapped: cpd00151 - Thymine\n",
      "\n",
      "[195/206] Trisodium citrate dihydrate\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[196/206] Tween 20\n",
      "  ✓  Mapped: cpd13391 - Tween 20\n",
      "\n",
      "[197/206] Unnamed: 1\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[198/206] Uridine\n",
      "  ✓  Mapped: cpd00249 - Uridine\n",
      "\n",
      "[199/206] Valeric acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[200/206] Vanillic Acid\n",
      "    WARNING: Solr search failed: HTTP Error 400: Bad Request\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[201/206] Vanillin\n",
      "  ✓  Mapped: cpd00561 - Vanillin\n",
      "\n",
      "[202/206] Vitafiber-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[203/206] Vitagos-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[204/206] WakoIMO-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "[205/206] Xylitol\n",
      "  ✓  Mapped: cpd00306 - Xylitol\n",
      "\n",
      "[206/206] Yacontrol-prebiotic\n",
      "  ✗  NOT FOUND - will try LLM in Round 2\n",
      "\n",
      "================================================================================\n",
      "ROUND 1 COMPLETE\n",
      "  Mapped: 85 (41.3%)\n",
      "  Unmapped: 121 (58.7%)\n",
      "================================================================================\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*80)\n",
    "print(\"ROUND 1: AUTOMATED MAPPING\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "mappings = []\n",
    "unmapped = []\n",
    "\n",
    "for i, carbon_source in enumerate(carbon_sources, 1):\n",
    "    print(f\"\\n[{i}/{len(carbon_sources)}] {carbon_source}\")\n",
    "    \n",
    "    matches = search_compound_round1(carbon_source)\n",
    "    \n",
    "    if matches:\n",
    "        # Found matches\n",
    "        best_match = matches[0]  # Lowest ID (already sorted)\n",
    "        \n",
    "        if len(matches) > 1:\n",
    "            # Report duplicates\n",
    "            duplicate_ids = [m['id'] for m in matches]\n",
    "            print(f\"  ⚠️  DUPLICATE: Found {len(matches)} matches: {duplicate_ids}\")\n",
    "            print(f\"  ✓  Selected: {best_match['id']} (lowest ID)\")\n",
    "        else:\n",
    "            print(f\"  ✓  Mapped: {best_match['id']} - {best_match['name']}\")\n",
    "        \n",
    "        mappings.append({\n",
    "            'Carbon_Source_Original': carbon_source,\n",
    "            'ModelSEED_ID': best_match['id'],\n",
    "            'ModelSEED_Name': best_match['name'],\n",
    "            'Formula': best_match['formula'],\n",
    "            'Mass': best_match['mass'],\n",
    "            'Charge': best_match['charge'],\n",
    "            'Mapping_Method': f\"round1_{best_match['source']}\",\n",
    "            'Confidence': 'High',\n",
    "            'AI_Explanation': '',\n",
    "            'Duplicate_IDs': ';'.join([m['id'] for m in matches[1:]]) if len(matches) > 1 else ''\n",
    "        })\n",
    "    else:\n",
    "        # No matches found\n",
    "        print(f\"  ✗  NOT FOUND - will try LLM in Round 2\")\n",
    "        unmapped.append(carbon_source)\n",
    "\n",
    "print(f\"\\n{'='*80}\")\n",
    "print(f\"ROUND 1 COMPLETE\")\n",
    "print(f\"  Mapped: {len(mappings)} ({100*len(mappings)/len(carbon_sources):.1f}%)\")\n",
    "print(f\"  Unmapped: {len(unmapped)} ({100*len(unmapped)/len(carbon_sources):.1f}%)\")\n",
    "print(f\"{'='*80}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Round 2: AI-Assisted Mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "ROUND 2: AI-ASSISTED MAPPING\n",
      "================================================================================\n",
      "\n",
      "Attempting to map 121 compounds using LLM...\n",
      "\n",
      "[1/121] (+)-Arabinogalactan\n",
      "  🤖 LLM Mapped: cpd00186 - D-Galactose\n",
      "     Explanation: Arabinogalactan is a polysaccharide primarily composed of galactose units with arabinose side chains; for polymers, ModelSEED mapping typically uses the dominant monomer, here D-Galactose.\n",
      "     Confidence: medium\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'search_template_by_id' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[8], line 24\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m     Confidence: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mconfidence\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# Verify LLM suggestion exists in template\u001b[39;00m\n\u001b[0;32m---> 24\u001b[0m verification \u001b[38;5;241m=\u001b[39m \u001b[43msearch_template_by_id\u001b[49m(cpd_id)\n\u001b[1;32m     25\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m verification:\n\u001b[1;32m     26\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m  ✓  Verified in template\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'search_template_by_id' is not defined"
     ]
    }
   ],
   "source": [
    "if unmapped:\n",
    "    print(\"\\n\" + \"=\"*80)\n",
    "    print(\"ROUND 2: AI-ASSISTED MAPPING\")\n",
    "    print(\"=\"*80)\n",
    "    print(f\"\\nAttempting to map {len(unmapped)} compounds using LLM...\")\n",
    "    \n",
    "    for i, carbon_source in enumerate(unmapped, 1):\n",
    "        print(f\"\\n[{i}/{len(unmapped)}] {carbon_source}\")\n",
    "        \n",
    "        llm_result = ask_llm_for_mapping(carbon_source)\n",
    "        \n",
    "        if llm_result:\n",
    "            cpd_id = llm_result.get('compound_id', 'UNMAPPED')\n",
    "            cpd_name = llm_result.get('compound_name', '')\n",
    "            explanation = llm_result.get('explanation', '')\n",
    "            confidence = llm_result.get('confidence', 'low')\n",
    "            \n",
    "            if cpd_id != 'UNMAPPED':\n",
    "                print(f\"  🤖 LLM Mapped: {cpd_id} - {cpd_name}\")\n",
    "                print(f\"     Explanation: {explanation}\")\n",
    "                print(f\"     Confidence: {confidence}\")\n",
    "                \n",
    "                # Verify LLM suggestion exists in template\n",
    "                verification = search_template_by_id(cpd_id)\n",
    "                if verification:\n",
    "                    print(f\"  ✓  Verified in template\")\n",
    "                    mappings.append({\n",
    "                        'Carbon_Source_Original': carbon_source,\n",
    "                        'ModelSEED_ID': cpd_id,\n",
    "                        'ModelSEED_Name': verification['name'],\n",
    "                        'Formula': verification.get('formula', ''),\n",
    "                        'Mass': verification.get('mass', 0),\n",
    "                        'Charge': verification.get('defaultCharge', 0),\n",
    "                        'Mapping_Method': 'round2_llm',\n",
    "                        'Confidence': confidence.capitalize(),\n",
    "                        'AI_Explanation': explanation,\n",
    "                        'Duplicate_IDs': ''\n",
    "                    })\n",
    "                else:\n",
    "                    print(f\"  ⚠️  NOT VERIFIED - LLM suggested ID not in template\")\n",
    "                    mappings.append({\n",
    "                        'Carbon_Source_Original': carbon_source,\n",
    "                        'ModelSEED_ID': 'UNMAPPED',\n",
    "                        'ModelSEED_Name': '',\n",
    "                        'Formula': '',\n",
    "                        'Mass': 0,\n",
    "                        'Charge': 0,\n",
    "                        'Mapping_Method': 'round2_llm_unverified',\n",
    "                        'Confidence': 'Low',\n",
    "                        'AI_Explanation': f\"LLM suggested {cpd_id} but not found in template\",\n",
    "                        'Duplicate_IDs': ''\n",
    "                    })\n",
    "            else:\n",
    "                print(f\"  ✗  LLM could not map: {explanation}\")\n",
    "                mappings.append({\n",
    "                    'Carbon_Source_Original': carbon_source,\n",
    "                    'ModelSEED_ID': 'UNMAPPED',\n",
    "                    'ModelSEED_Name': '',\n",
    "                    'Formula': '',\n",
    "                    'Mass': 0,\n",
    "                    'Charge': 0,\n",
    "                    'Mapping_Method': 'round2_llm_failed',\n",
    "                    'Confidence': 'Low',\n",
    "                    'AI_Explanation': explanation,\n",
    "                    'Duplicate_IDs': ''\n",
    "                })\n",
    "        else:\n",
    "            print(f\"  ✗  LLM request failed\")\n",
    "            mappings.append({\n",
    "                'Carbon_Source_Original': carbon_source,\n",
    "                'ModelSEED_ID': 'UNMAPPED',\n",
    "                'ModelSEED_Name': '',\n",
    "                'Formula': '',\n",
    "                'Mass': 0,\n",
    "                'Charge': 0,\n",
    "                'Mapping_Method': 'round2_llm_error',\n",
    "                'Confidence': 'Low',\n",
    "                'AI_Explanation': 'LLM request error',\n",
    "                'Duplicate_IDs': ''\n",
    "            })\n",
    "        \n",
    "        # Rate limit: small delay between requests\n",
    "        time.sleep(0.5)\n",
    "    \n",
    "    print(f\"\\n{'='*80}\")\n",
    "    print(\"ROUND 2 COMPLETE\")\n",
    "    print(f\"{'='*80}\")\n",
    "else:\n",
    "    print(\"\\n✓ All compounds mapped in Round 1 - skipping Round 2\")\n",
    "\n",
    "\n",
    "def search_template_by_id(compound_id):\n",
    "    \"\"\"Helper to verify LLM suggestions\"\"\"\n",
    "    for compound in template_compounds:\n",
    "        if compound['id'] == compound_id:\n",
    "            return compound\n",
    "    return None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create DataFrame\n",
    "mapping_df = pd.DataFrame(mappings)\n",
    "\n",
    "# Statistics\n",
    "total = len(mapping_df)\n",
    "mapped = (mapping_df['ModelSEED_ID'] != 'UNMAPPED').sum()\n",
    "unmapped_final = (mapping_df['ModelSEED_ID'] == 'UNMAPPED').sum()\n",
    "\n",
    "round1_mapped = mapping_df['Mapping_Method'].str.startswith('round1').sum()\n",
    "round2_mapped = (mapping_df['Mapping_Method'].str.startswith('round2') & \n",
    "                 (mapping_df['ModelSEED_ID'] != 'UNMAPPED')).sum()\n",
    "\n",
    "duplicates = (mapping_df['Duplicate_IDs'] != '').sum()\n",
    "ai_assisted = (mapping_df['AI_Explanation'] != '').sum()\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)\n",
    "print(\"MAPPING SUMMARY\")\n",
    "print(\"=\"*80)\n",
    "print(f\"\\nTotal carbon sources: {total}\")\n",
    "print(f\"\\nSuccessfully mapped: {mapped} ({100*mapped/total:.1f}%)\")\n",
    "print(f\"  Round 1 (automated): {round1_mapped}\")\n",
    "print(f\"  Round 2 (AI-assisted): {round2_mapped}\")\n",
    "print(f\"\\nUnmapped: {unmapped_final} ({100*unmapped_final/total:.1f}%)\")\n",
    "print(f\"\\nDuplicates resolved: {duplicates}\")\n",
    "print(f\"AI-assisted mappings: {ai_assisted}\")\n",
    "\n",
    "print(f\"\\n{'='*80}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save Mapping Table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\"\\nSaving mapping table to: {MAPPING_FILE}\")\n",
    "mapping_df.to_csv(MAPPING_FILE, index=False)\n",
    "print(f\"Saved {len(mapping_df)} mappings\")\n",
    "\n",
    "# Display first 20 rows\n",
    "print(f\"\\nFirst 20 mappings:\")\n",
    "display(mapping_df.head(20))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Review Unmapped Compounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "unmapped_df = mapping_df[mapping_df['ModelSEED_ID'] == 'UNMAPPED']\n",
    "\n",
    "if len(unmapped_df) > 0:\n",
    "    print(f\"\\n⚠️  MANUAL CURATION REQUIRED for {len(unmapped_df)} compounds:\")\n",
    "    print(\"=\"*80)\n",
    "    \n",
    "    for idx, row in unmapped_df.iterrows():\n",
    "        print(f\"\\n{row['Carbon_Source_Original']}\")\n",
    "        print(f\"  Method: {row['Mapping_Method']}\")\n",
    "        if row['AI_Explanation']:\n",
    "            print(f\"  AI says: {row['AI_Explanation']}\")\n",
    "    \n",
    "    print(\"\\n\" + \"=\"*80)\n",
    "    print(\"\\nSuggestions for manual curation:\")\n",
    "    print(\"1. Check ModelSEED web interface: https://modelseed.org\")\n",
    "    print(\"2. Search KEGG database for compound IDs\")\n",
    "    print(\"3. For complex mixtures, consider using representative compound\")\n",
    "    print(\"4. For proprietary prebiotics, research composition\")\n",
    "    print(\"5. Update mapping CSV manually and re-run media generation\")\n",
    "else:\n",
    "    print(\"\\n✓ All compounds successfully mapped!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Media JSON Files\n",
    "\n",
    "Create individual media formulation files for each mapped carbon source."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Base media formulation (same for all)\n",
    "BASE_MEDIA = {\n",
    "    'cpd00007': (-10, 100),    # O2\n",
    "    'cpd00001': (-100, 100),   # H2O\n",
    "    'cpd00009': (-100, 100),   # Phosphate\n",
    "    'cpd00013': (-100, 100),   # NH3\n",
    "    'cpd00048': (-100, 100),   # Sulfate\n",
    "    'cpd00099': (-100, 100),   # Cl-\n",
    "    'cpd00067': (-100, 100),   # H+\n",
    "    'cpd00205': (-100, 100),   # K+\n",
    "    'cpd00254': (-100, 100),   # Mg2+\n",
    "    'cpd00971': (-100, 100),   # Na+\n",
    "    'cpd00149': (-100, 100),   # Co2+\n",
    "    'cpd00063': (-100, 100),   # Ca2+\n",
    "    'cpd00058': (-100, 100),   # Cu2+\n",
    "    'cpd00034': (-100, 100),   # Zn2+\n",
    "    'cpd00030': (-100, 100),   # Mn2+\n",
    "    'cpd10515': (-100, 100),   # Fe2+\n",
    "    'cpd10516': (-100, 100),   # Fe3+\n",
    "    'cpd11574': (-100, 100),   # Molybdate\n",
    "    'cpd00244': (-100, 100),   # Ni2+\n",
    "}\n",
    "\n",
    "# Carbon source uptake rate (negative = uptake)\n",
    "CARBON_UPTAKE_RATE = -5\n",
    "\n",
    "print(\"Base media formulation loaded\")\n",
    "print(f\"  Base nutrients: {len(BASE_MEDIA)}\")\n",
    "print(f\"  Carbon uptake rate: {CARBON_UPTAKE_RATE} mmol/gDW/hr\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\"\\nGenerating media JSON files...\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "media_generated = 0\n",
    "media_skipped = 0\n",
    "\n",
    "for idx, row in mapping_df.iterrows():\n",
    "    carbon_source = row['Carbon_Source_Original']\n",
    "    cpd_id = row['ModelSEED_ID']\n",
    "    \n",
    "    if cpd_id == 'UNMAPPED':\n",
    "        print(f\"  ✗ Skipping {carbon_source} (unmapped)\")\n",
    "        media_skipped += 1\n",
    "        continue\n",
    "    \n",
    "    # Create media formulation\n",
    "    media_dict = BASE_MEDIA.copy()\n",
    "    media_dict[cpd_id] = (CARBON_UPTAKE_RATE, 100)\n",
    "    \n",
    "    # Create safe filename\n",
    "    safe_filename = carbon_source.replace('/', '_').replace(' ', '_').replace(',', '')\n",
    "    safe_filename = safe_filename.replace('(', '').replace(')', '')\n",
    "    media_file = MEDIA_DIR / f\"{safe_filename}.json\"\n",
    "    \n",
    "    # Save media file\n",
    "    with open(media_file, 'w') as f:\n",
    "        json.dump(media_dict, f, indent=2)\n",
    "    \n",
    "    media_generated += 1\n",
    "    \n",
    "    if media_generated <= 5:\n",
    "        print(f\"  ✓ Generated: {media_file.name}\")\n",
    "\n",
    "if media_generated > 5:\n",
    "    print(f\"  ... and {media_generated - 5} more files\")\n",
    "\n",
    "print(f\"\\n{'='*80}\")\n",
    "print(f\"Media generation complete\")\n",
    "print(f\"  Generated: {media_generated}\")\n",
    "print(f\"  Skipped: {media_skipped}\")\n",
    "print(f\"  Output directory: {MEDIA_DIR}\")\n",
    "print(f\"{'='*80}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Usage Example\n",
    "\n",
    "How to load media files for ModelSEEDpy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example: Load glucose media\n",
    "print(\"Example: Loading media for D-Glucose\")\n",
    "print(\"=\"*80)\n",
    "\n",
    "# Find glucose media file\n",
    "glucose_file = MEDIA_DIR / \"2-Deoxy-D-Ribose.json\"  # First carbon source as example\n",
    "\n",
    "if glucose_file.exists():\n",
    "    with open(glucose_file) as f:\n",
    "        media_dict = json.load(f)\n",
    "    \n",
    "    print(f\"\\nLoaded media from: {glucose_file.name}\")\n",
    "    print(f\"Total compounds: {len(media_dict)}\")\n",
    "    print(f\"\\nCarbon source:\")\n",
    "    for cpd_id, bounds in media_dict.items():\n",
    "        if bounds[0] == CARBON_UPTAKE_RATE:  # Find carbon source\n",
    "            print(f\"  {cpd_id}: {bounds}\")\n",
    "    \n",
    "    print(f\"\\nUsage with ModelSEEDpy:\")\n",
    "    print(\"  from modelseedpy import MSMedia\")\n",
    "    print(f\"  media = MSMedia.from_dict(media_dict)\")\n",
    "    print(\"  model.medium = media.get_media_constraints()\")\n",
    "else:\n",
    "    print(\"Example media file not found\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "**Files Created**:\n",
    "1. `results/carbon_source_mapping.csv` - Complete mapping table\n",
    "2. `media/*.json` - Individual media formulations\n",
    "\n",
    "**Next Steps**:\n",
    "1. Review unmapped compounds and perform manual curation if needed\n",
    "2. Update mapping CSV with manual corrections\n",
    "3. Re-run media generation section if needed\n",
    "4. Proceed to CDMSCI-198: Build metabolic models\n",
    "5. Proceed to CDMSCI-199: Run FBA simulations with these media"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
